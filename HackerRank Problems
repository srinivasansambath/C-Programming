// string problem
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() 
{
    char ch,s[100],sen[100];
    scanf("%c",&ch);
    scanf("\n");
    scanf("%[^\n]%*c",&s);
    scanf("\n");
    scanf("%[^\n]%*c",&sen);
    printf("%c",ch);
    printf("\n%s",s);
    printf("\n%s",sen);
    return 0;
}

// sum and difference of two numbers
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main()
{
    int num1,num2,intsum,intsub;
    float num3,num4,floatsum,floatsub;
    scanf("%d %d",&num1,&num2);
    scanf("%f %f",&num3,&num4);
    intsum = num1+num2;
    intsub = num1-num2;
	floatsum = num3+num4;
    floatsub = num3-num4;
    printf("%d %d",intsum,intsub);
    printf("\n%.1f %.1f",floatsum,floatsub);
    return 0;
}
// Functions in C
#include <stdio.h>
int max_of_four(int a,int b,int c,int d)
{
    if (a>b && a>c && a>d)
    {
        return a;
    }
    else if(b>c && b>d)
    {
        return b;
    }
    else if (c>d)
    {
        return c;
    }
    else  
    {
        return d;
    }
}
int max_of_four(int a,int b,int c,int d);
int main() {
    int a, b, c, d;
    scanf("%d %d %d %d", &a, &b, &c, &d);
    int ans = max_of_four(a, b, c, d);
    printf("%d", ans);
    
    return 0;
}

// Functions in C - Code with error
#include <stdio.h>
int max_of_four(int a,int b,int c,int d)
{
    a>b && a>c && a>d? return a:
    b>c && b>d ? return b:
    c>d ? return c : return d ;
}
int max_of_four(int a,int b,int c,int d);
int main() {
    int a, b, c, d;
    scanf("%d %d %d %d", &a, &b, &c, &d);
    int ans = max_of_four(a, b, c, d);
    printf("%d", ans);
    
    return 0;
}
/* The error occured here is because, the calling function has more return statements. 
"Whenever a return statement is excecuted, control immediately closes the function definition and returns back to the calling function."
So if we give return statements multiple times, the other conditions after 1st return won't be checked.
*/
/*Inorder to overcome the above problem store the result of conditional operator in a variable and then return that variable to the calling function*/
//
Pointers in C Hacker Rank Problem 
#include <stdio.h>
#include <stdlib.h>
void update(int *a,int *b) {
    int sum;int sub ;
    sum = *a + *b;
    sub = (*a - *b);
    int sub1= abs(sub);
    *a = sum;
    *b = sub1;
}

int main() {
    int a, b;
    int *pa = &a, *pb = &b;
    
    scanf("%d %d", &a, &b);
    update(pa, pb);
    printf("%d\n%d", a, b);

    return 0;
}
/*The observation from the above program is whenever we are using abs() function then we need to give only one variable as an argument.
While giving an expression as arg compilation error occurs. 
Inorder to find absolute value of an expression the trick is to store the Final result of the expression into a new variable with int datatype
and then apply abs() function.
syntax : int x = abs(y);*/

//conditional statement in C language
//Hackerrank Problem
#include <assert.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();



int main()
{
    char* n_endptr;
    char* n_str = readline();
    int n = strtol(n_str, &n_endptr, 10);

    if (n_endptr == n_str || *n_endptr != '\0') { exit(EXIT_FAILURE); }

    int num;
    scanf("%d",&num);
    if(num == 1)
    {
        printf("one");
    }
    else if(num == 2)
    {
        printf("two");
    }
    else if(num == 3)
    {
        printf("three");
    }
    else if(num == 4)
    {
        printf("four");
    }
    else if(num==5)
    {
        printf("five");
    }
    else if(num==6)
    {
        printf("six");
    }
    else if(num==7)
    {
        printf("seven");
    }
    else if(num==8)
    {
        printf("eight");
    }
    else if(num==9)
    {
    printf("nine");
    }
    else 
    {
    printf("Greater than 9");
    }

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) { break; }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') { break; }

        size_t new_length = alloc_length << 1;
        data = realloc(data, new_length);

        if (!data) { break; }

        alloc_length = new_length;
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
    }

    data = realloc(data, data_length);

    return data;
}
OUTPUT:
The above code is with error whenever 1 or 2 or 3 so on until 8 is given , it gives the output as nine only.
The error is because, I didnt gave another else statement to satisfy the conditions when num vale is greater than 9.
While giving else condition, it works!


//For loop in C Hackerrank Problem
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



int main() 
{
    int a, b;
    int i;
    scanf("%d\n%d", &a, &b);
  	// Complete the code.
    for(i=a; i<=b; i=i+1,a=a+1)
    {
        if(a==1)
        {
            printf("one\n");
        }
        else if(a==2)
        {
            printf("two\n");
        }
        else if(a==3)
        {
            printf("three\n");
        }
        else if(a==4)
        {
            printf("four\n");
        }
        else if(a==5)
        {
            printf("five\n");
        }
        else if(a==6)
        {
            printf("six\n");
        }
        else if(a==7)
        {
            printf("seven\n");
        }
        else if(a==8)
        {
            printf("eight\n");
        }
        else if(a==9)
        {
            printf("nine\n");
        }
        else if(a>9)
        {
            if(a%2 != 0)
            {
                printf("odd\n");
            }
            else
            {
                printf("even\n");
            }
        }
    }
    return 0;
}
OUTPUT:
9 
11
nine
even
odd


